{"ast":null,"code":"var _jsxFileName = \"/Users/zach/springboard/react-jokes-classes/src/JokeList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JokeList = ({\n  numJokesToGet = 5\n}) => {\n  _s();\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const getJokes = useCallback(async () => {\n    try {\n      const newJokes = [];\n      const seenJokes = new Set();\n      while (newJokes.length < numJokesToGet) {\n        const res = await axios.get('https://icanhazdadjoke.com', {\n          headers: {\n            Accept: 'application/json'\n          }\n        });\n        const joke = res.data;\n        if (!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id);\n          newJokes.push({\n            ...joke,\n            votes: 0\n          });\n        } else {\n          console.log('duplicate found!');\n        }\n      }\n      setJokes(newJokes);\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }, [numJokesToGet]);\n  useEffect(() => {\n    getJokes();\n  }, [getJokes]);\n  const generateNewJokes = useCallback(() => {\n    setIsLoading(true);\n    getJokes();\n  }, [getJokes]);\n  const vote = useCallback((id, delta) => {\n    setJokes(jokes => jokes.map(j => j.id === id ? {\n      ...j,\n      votes: j.votes + delta\n    } : j));\n  }, []);\n  const sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-4x fa-spinner fa-spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"JokeList\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"JokeList-getmore\",\n      onClick: generateNewJokes,\n      children: \"Get New Jokes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), sortedJokes.map(j => /*#__PURE__*/_jsxDEV(Joke, {\n      text: j.joke,\n      id: j.id,\n      votes: j.votes,\n      vote: vote\n    }, j.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(JokeList, \"23dcJzVNDDzOJU4aIDlTU0gPi4U=\");\n_c = JokeList;\nexport default JokeList;\nvar _c;\n$RefreshReg$(_c, \"JokeList\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","axios","Joke","jsxDEV","_jsxDEV","JokeList","numJokesToGet","_s","jokes","setJokes","isLoading","setIsLoading","getJokes","newJokes","seenJokes","Set","length","res","get","headers","Accept","joke","data","has","id","add","push","votes","console","log","err","error","generateNewJokes","vote","delta","map","j","sortedJokes","sort","a","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","text","_c","$RefreshReg$"],"sources":["/Users/zach/springboard/react-jokes-classes/src/JokeList.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\n\nconst JokeList = ({ numJokesToGet = 5 }) => {\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getJokes = useCallback(async () => {\n    try {\n      const newJokes = [];\n      const seenJokes = new Set();\n\n      while (newJokes.length < numJokesToGet) {\n        const res = await axios.get('https://icanhazdadjoke.com', {\n          headers: { Accept: 'application/json' },\n        });\n        const joke = res.data;\n\n        if (!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id);\n          newJokes.push({ ...joke, votes: 0 });\n        } else {\n          console.log('duplicate found!');\n        }\n      }\n\n      setJokes(newJokes);\n      setIsLoading(false);\n    } catch (err) {\n      console.error(err);\n    }\n  }, [numJokesToGet]);\n\n  useEffect(() => {\n    getJokes();\n  }, [getJokes]);\n\n  const generateNewJokes = useCallback(() => {\n    setIsLoading(true);\n    getJokes();\n  }, [getJokes]);\n\n  const vote = useCallback((id, delta) => {\n    setJokes((jokes) =>\n      jokes.map((j) =>\n        j.id === id ? { ...j, votes: j.votes + delta } : j\n      )\n    );\n  }, []);\n\n  const sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n  if (isLoading) {\n    return (\n      <div className=\"loading\">\n        <i className=\"fas fa-4x fa-spinner fa-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"JokeList\">\n      <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n        Get New Jokes\n      </button>\n\n      {sortedJokes.map((j) => (\n        <Joke\n          text={j.joke}\n          key={j.id}\n          id={j.id}\n          votes={j.votes}\n          vote={vote}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default JokeList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAC/D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,gBAAgB;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,aAAa,GAAG;AAAE,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMc,QAAQ,GAAGb,WAAW,CAAC,YAAY;IACvC,IAAI;MACF,MAAMc,QAAQ,GAAG,EAAE;MACnB,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;MAE3B,OAAOF,QAAQ,CAACG,MAAM,GAAGV,aAAa,EAAE;QACtC,MAAMW,GAAG,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,4BAA4B,EAAE;UACxDC,OAAO,EAAE;YAAEC,MAAM,EAAE;UAAmB;QACxC,CAAC,CAAC;QACF,MAAMC,IAAI,GAAGJ,GAAG,CAACK,IAAI;QAErB,IAAI,CAACR,SAAS,CAACS,GAAG,CAACF,IAAI,CAACG,EAAE,CAAC,EAAE;UAC3BV,SAAS,CAACW,GAAG,CAACJ,IAAI,CAACG,EAAE,CAAC;UACtBX,QAAQ,CAACa,IAAI,CAAC;YAAE,GAAGL,IAAI;YAAEM,KAAK,EAAE;UAAE,CAAC,CAAC;QACtC,CAAC,MAAM;UACLC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QACjC;MACF;MAEApB,QAAQ,CAACI,QAAQ,CAAC;MAClBF,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,OAAOmB,GAAG,EAAE;MACZF,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC;IACpB;EACF,CAAC,EAAE,CAACxB,aAAa,CAAC,CAAC;EAEnBN,SAAS,CAAC,MAAM;IACdY,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMoB,gBAAgB,GAAGjC,WAAW,CAAC,MAAM;IACzCY,YAAY,CAAC,IAAI,CAAC;IAClBC,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMqB,IAAI,GAAGlC,WAAW,CAAC,CAACyB,EAAE,EAAEU,KAAK,KAAK;IACtCzB,QAAQ,CAAED,KAAK,IACbA,KAAK,CAAC2B,GAAG,CAAEC,CAAC,IACVA,CAAC,CAACZ,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGY,CAAC;MAAET,KAAK,EAAES,CAAC,CAACT,KAAK,GAAGO;IAAM,CAAC,GAAGE,CACnD,CACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAG,CAAC,GAAG7B,KAAK,CAAC,CAAC8B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACb,KAAK,GAAGY,CAAC,CAACZ,KAAK,CAAC;EAEhE,IAAIjB,SAAS,EAAE;IACb,oBACEN,OAAA;MAAKqC,SAAS,EAAC,SAAS;MAAAC,QAAA,eACtBtC,OAAA;QAAGqC,SAAS,EAAC;MAA8B;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC;EAEV;EAEA,oBACE1C,OAAA;IAAKqC,SAAS,EAAC,UAAU;IAAAC,QAAA,gBACvBtC,OAAA;MAAQqC,SAAS,EAAC,kBAAkB;MAACM,OAAO,EAAEf,gBAAiB;MAAAU,QAAA,EAAC;IAEhE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAERT,WAAW,CAACF,GAAG,CAAEC,CAAC,iBACjBhC,OAAA,CAACF,IAAI;MACH8C,IAAI,EAAEZ,CAAC,CAACf,IAAK;MAEbG,EAAE,EAAEY,CAAC,CAACZ,EAAG;MACTG,KAAK,EAAES,CAAC,CAACT,KAAM;MACfM,IAAI,EAAEA;IAAK,GAHNG,CAAC,CAACZ,EAAE;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIV,CACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACvC,EAAA,CA1EIF,QAAQ;AAAA4C,EAAA,GAAR5C,QAAQ;AA4Ed,eAAeA,QAAQ;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}